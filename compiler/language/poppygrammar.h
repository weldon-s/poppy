#include "grammar.h"

const Grammar poppy_grammar = Grammar{
    Symbol::PROGRAM,
    {
        Rule(Symbol::PROGRAM, {Symbol::DEFNS, Symbol::END}),
        Rule(Symbol::DEFNS, {Symbol::DEFN}),
        Rule(Symbol::DEFNS, {Symbol::DEFN, Symbol::DEFNS}),
        Rule(Symbol::DEFN, {Symbol::TYPE, Symbol::IDENTIFIER, Symbol::LPAREN, Symbol::OPTPARAMS, Symbol::RPAREN, Symbol::LBRACE, Symbol::STMTS, Symbol::RBRACE}),
        Rule(Symbol::TYPE, {Symbol::INT}),
        Rule(Symbol::TYPE, {Symbol::CHAR}),
        Rule(Symbol::TYPE, {Symbol::STRING}),
        Rule(Symbol::OPTPARAMS, {}),
        Rule(Symbol::OPTPARAMS, {Symbol::PARAMS}),
        Rule(Symbol::PARAMS, {Symbol::PARAM, Symbol::COMMA, Symbol::PARAMS}),
        Rule(Symbol::PARAMS, {Symbol::PARAM}),
        Rule(Symbol::PARAM, {Symbol::TYPE, Symbol::IDENTIFIER}),
        Rule(Symbol::STMTS, {Symbol::STMT}),
        Rule(Symbol::STMTS, {Symbol::STMT, Symbol::STMTS}),
        Rule(Symbol::STMT, {Symbol::SEMISTMT, Symbol::SEMICOLON}),
        Rule(Symbol::SEMISTMT, {Symbol::TYPE, Symbol::IDENTIFIER, Symbol::ASSIGN, Symbol::EXPR}),
        Rule(Symbol::SEMISTMT, {Symbol::IDENTIFIER, Symbol::ASSIGN, Symbol::EXPR}),
        Rule(Symbol::SEMISTMT, {Symbol::HOP, Symbol::EXPR}),
        Rule(Symbol::SEMISTMT, {Symbol::EXPR}),
        Rule(Symbol::STMT, {Symbol::IF, Symbol::LPAREN, Symbol::COND, Symbol::RPAREN, Symbol::LBRACE, Symbol::STMTS, Symbol::RBRACE, Symbol::OPTELSE}),
        Rule(Symbol::OPTELSE, {}),
        Rule(Symbol::OPTELSE, {Symbol::ELSE, Symbol::LBRACE, Symbol::STMTS, Symbol::RBRACE}),
        Rule(Symbol::STMT, {Symbol::WHILE, Symbol::LPAREN, Symbol::COND, Symbol::RPAREN, Symbol::LBRACE, Symbol::STMTS, Symbol::RBRACE}),
        Rule(Symbol::STMT, {Symbol::FOR, Symbol::LPAREN, Symbol::SEMISTMT, Symbol::SEMICOLON, Symbol::COND, Symbol::SEMICOLON, Symbol::SEMISTMT, Symbol::RPAREN, Symbol::LBRACE, Symbol::STMTS, Symbol::RBRACE}),
        Rule(Symbol::COND, {Symbol::ANDCOND}),
        Rule(Symbol::ANDCOND, {Symbol::ANDCOND, Symbol::AND, Symbol::ORCOND}),
        Rule(Symbol::ANDCOND, {Symbol::ORCOND}),
        Rule(Symbol::ORCOND, {Symbol::ORCOND, Symbol::OR, Symbol::UNCOND}),
        Rule(Symbol::ORCOND, {Symbol::UNCOND}),
        Rule(Symbol::UNCOND, {Symbol::NOT, Symbol::UNCOND}),
        Rule(Symbol::UNCOND, {Symbol::LPAREN, Symbol::COND, Symbol::RPAREN}),
        Rule(Symbol::UNCOND, {Symbol::EXPR, Symbol::LT, Symbol::EXPR}),
        Rule(Symbol::UNCOND, {Symbol::EXPR, Symbol::GT, Symbol::EXPR}),
        Rule(Symbol::UNCOND, {Symbol::EXPR, Symbol::LE, Symbol::EXPR}),
        Rule(Symbol::UNCOND, {Symbol::EXPR, Symbol::GE, Symbol::EXPR}),
        Rule(Symbol::UNCOND, {Symbol::EXPR, Symbol::EQ, Symbol::EXPR}),
        Rule(Symbol::UNCOND, {Symbol::EXPR, Symbol::NE, Symbol::EXPR}),
        Rule(Symbol::EXPR, {Symbol::ADDEXPR}),
        Rule(Symbol::ADDEXPR, {Symbol::ADDEXPR, Symbol::PLUS, Symbol::MULTEXPR}),
        Rule(Symbol::ADDEXPR, {Symbol::ADDEXPR, Symbol::MINUS, Symbol::MULTEXPR}),
        Rule(Symbol::ADDEXPR, {Symbol::MULTEXPR}),
        Rule(Symbol::MULTEXPR, {Symbol::MULTEXPR, Symbol::TIMES, Symbol::UNEXPR}),
        Rule(Symbol::MULTEXPR, {Symbol::MULTEXPR, Symbol::DIVIDE, Symbol::UNEXPR}),
        Rule(Symbol::MULTEXPR, {Symbol::MULTEXPR, Symbol::MOD, Symbol::UNEXPR}),
        Rule(Symbol::MULTEXPR, {Symbol::UNEXPR}),
        Rule(Symbol::UNEXPR, {Symbol::LPAREN, Symbol::EXPR, Symbol::RPAREN}),
        Rule(Symbol::UNEXPR, {Symbol::IDENTIFIER, Symbol::LPAREN, Symbol::OPTARGS, Symbol::RPAREN}),
        Rule(Symbol::OPTARGS, {}),
        Rule(Symbol::OPTARGS, {Symbol::ARGS}),
        Rule(Symbol::ARGS, {Symbol::EXPR}),
        Rule(Symbol::ARGS, {Symbol::EXPR, Symbol::COMMA, Symbol::ARGS}),
        Rule(Symbol::UNEXPR, {Symbol::INC, Symbol::IDENTIFIER}),
        Rule(Symbol::UNEXPR, {Symbol::DEC, Symbol::IDENTIFIER}),
        Rule(Symbol::UNEXPR, {Symbol::IDENTIFIER}),
        Rule(Symbol::UNEXPR, {Symbol::CONSTANT}),
        Rule(Symbol::UNEXPR, {Symbol::STRINGLIT}),
        Rule(Symbol::UNEXPR, {Symbol::CHARLIT}),
    }};